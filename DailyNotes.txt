 
 Language:
 
 PL:
 
 1989--Guido van rossam
 
		feb 20th 1991
 
	
		public class Welcome{
			
			public static void main(String args[])
			{
			System.out.println("welcome to java");
			}
		
		}


	print("welcome to java")


	dynamic typed 
	
	Cpython
	
	
	indentation
	
	identifier
			
				a-z
				A-Z
				0-9
				_
				
				
	import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 
'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 
'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return',
 'try', 'while', 'with', 'yield']
 
 
 
 Datattypes
 
	int
	float
	complex
	bool
	str
	
	
	LIST
	Tuple
	set
	frozenset
	dict
	
	
		
		type()
		id()
		input()
		
		
		int()
		
		
		
		
	LIST:

		group of objects as single entity
		
		1)duplicates are allowed 
		2)insertion order is preserved 
		3)homogeneous / heterogeneous
		4)growable in nature
		5)[]
		6)muttable
		
	Tuple:
			group of objects as single entity same like list except tuple is immutable
		
		1)duplicates are allowed 
		2)insertion order is preserved 
		3)homogeneous / heterogeneous
		4)growable in nature
		5)()
		6)immutable
		
	
	Set:

	group of objects as single entity

		1)duplicates are not allowed 
		2)insertion order is not preserved 
		3)homogeneous / heterogeneous allowed
		4)growable in nature
		5){}
		6)muttable


	FrozenSet:

	group of objects as single entity

		1)duplicates are not allowed 
		2)insertion order is not preserved 
		3)homogeneous / heterogeneous allowed
		4)growable in nature
		5)({})/ forzenset()
		6)imuttable


	dict:
		to represent group objects as key,value
		
		1)entry-->key,value
		
		2)key must be unique values can be duplicate
		
		3){}
		4)muttable
		
	
	
		.py
		
		pvm-->pyc
		
	oops	
	

		class Employee:
			
		variables
		
			instance 
			static
			local
		
		methods/function
			instance
			class 		@classmethod
			static		@staticmethod
			
		constructor  __init__
		
		
		
		inheritance is-a
		
		
		class Test
		
		
		
		
		class Client(Test)
		
		
		
		Polymorphisam:
		================
		
		Overriding:method name is same implementation is different 
		
		
		ovarloading:
		================
		
			print(10*20)
			print("india"*3)indiaindiaindia
		
		
		deposit(cash/check/dd)
		
		
			operator overloading
			method overloading:method name is same bu siganture is different 
		
		
				m1(a)
				m1(a,b,c)
		
		abc
		@abstractmethod 
		def m1(self):
			pass
		
	Iterators:
===============
			
			__iter__()
			__next__()
		
		iterable
		fruits=['apple','banana']
		
			iter(fruits)
		
	Genearator:
	============
		yield
		
	Design Patterns:
======================
		singleton pattern
			single instance wtih global access
		
		Factory Pattern
		
		 will define interface for objects,let sub class decide which class
		
	Structural Pattern:
=========================
Decorator pattern










	
		
		
		
		
	
		
		
		
		
		

	
		
		
		
		
		
		
		
		
		
		
		







	
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
 
 
 
 
				
				
				
				
				
				
				
				
				
				
				
				
	
	
		
	
	
	
	
	
	
	
	
	
	
	










































